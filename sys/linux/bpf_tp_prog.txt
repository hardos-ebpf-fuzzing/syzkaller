include <uapi/linux/bpf.h>

# TODO: Right now this ignores (almost) all return values

resource fd_bpf_map[fd]: BPF_PSEUDO_MAP_FD

# Hack: use int64 for ptr values
resource task_struct[int64]
resource task_struct_btf[int64]
resource ctx[int64]
resource ptr_to_key[int64]
resource ptr_to_val[int64]

# long bpf_copy_from_user(void *dst, u32 size, const void *user_ptr)
# For simplicity treat void *dst as int8*
bpf_copy_from_user(dst ptr[out, int8], size len[dst], user_ptr ptr[int, int8])

# long bpf_copy_from_user_task(void *dst, u32 size, const void *user_ptr, struct task_struct *tsk, u64 flags)
bpf_copy_from_user_task(dst ptr[out, int8], size len[dst], user_ptr ptr[int, int8], tsk task_struct_btf, flags const[0, int64])

# long bpf_current_task_under_cgroup(struct bpf_map *map, u32 index)
bpf_current_task_under_cgroup(map fd_bpf_map, index int32[0:4294967295])

bpf_dynptr {
    a1  int64
    a2  int64
}
# void *bpf_dynptr_data(struct bpf_dynptr *ptr, u32 offset, u32 len)
bpf_dynptr_data(ptr ptr[out, bpf_dynptr], offset int32[0:4294967295], len int32[0:4294967295])

# long bpf_dynptr_from_mem(void *data, u32 size, u64 flags, struct bpf_dynptr *ptr)
bpf_dynptr_from_mem(data ptr[in, int8], size len[data], flags const[0, int64], ptr ptr[out, bpf_dynptr])

# long bpf_dynptr_read(void *dst, u32 len, struct bpf_dynptr *src, u32 offset, u64 flags)
bpf_dynptr_read(dst ptr[out, int8], len len[dst], src ptr[in, bpf_dynptr], offset int32[0:4294967295], flags const[0, int64])

# long bpf_dynptr_write(struct bpf_dynptr *dst, u32 offset, void *src, u32 len, u64 flags)
bpf_dynptr_write(dst ptr[out, bpf_dynptr], offset int32[0:4294967295], src ptr[in, int8], len len[src], flags const[0, int64])

# long bpf_find_vma(struct task_struct *task, u64 addr, void *callback_fn, void *callback_ctx, u64 flags)
# FIXME callback_fn is tricky, how to represent it?
# bpf_find_vma(task task_struct_btf, addr int64[0:18446744073709551615], )

# long bpf_for_each_map_elem(struct bpf_map *map, void *callback_fn, void *callback_ctx, u64 flags)
# FIXME also have callback issue

# u64 bpf_get_attach_cookie(void *ctx)
bpf_get_attach_cookie(ctx ctx)

# long bpf_get_branch_snapshot(void *entries, u32 size, u64 flags)
bpf_get_branch_snapshot(entries ptr[out, int8], size len[entries], flags const[0, int64])

# u64 bpf_get_current_ancestor_cgroup_id(int ancestor_level)
bpf_get_current_ancestor_cgroup_id(ancestor_level int32)

# u64 bpf_get_current_cgroup_id(void)
bpf_get_current_cgroup_id()

# long bpf_get_current_comm(void *buf, u32 size_of_buf)
bpf_get_current_comm(buf ptr[out, int8], size_of_buf len[buf])

# u64 bpf_get_current_pid_tgid(void)
bpf_get_current_pid_tgid()

# u64 bpf_get_current_task(void)
bpf_get_current_task() task_struct

# struct task_struct *bpf_get_current_task_btf(void)
bpf_get_current_task_btf() task_struct_btf

# u64 bpf_get_current_uid_gid(void)
bpf_get_current_uid_gid()

# u64 bpf_get_func_ip(void *ctx)
bpf_get_func_ip(ctx ctx)

bpf_pidns_info {
	pid int32[0:4294967295]
	tgid int32[0:4294967295]
}
# long bpf_get_ns_current_pid_tgid(u64 dev, u64 ino, struct bpf_pidns_info *nsdata, u32 size)
bpf_get_ns_current_pid_tgid(dev int64[0:18446744073709551615], ino int64[0:18446744073709551615], nsdata ptr[out, bpf_pidns_info], size const[8, int32])

# long bpf_get_numa_node_id(void)
bpf_get_numa_node_id()

# u32 bpf_get_prandom_u32(void)
bpf_get_prandom_u32()

# u32 bpf_get_smp_processor_id(void)
bpf_get_smp_processor_id()

# long bpf_get_stack(void *ctx, void *buf, u32 size, u64 flags)
# FIXME Flags can be [0:255] | BPF_F_USER_STACK | BPF_F_USER_BUILD_ID
# How to represent w/o enumerating all 768 possible values?
# Does this work: bpf_get_stack_flags = const[1, int64], const[2, int64],
# const[4, int64], const[8, int64], const[16, int64], const[32, int64],
# const[64, int64], const[128, int64], BPF_F_USER_STACK, BPF_F_USER_BUILD_ID
# bpf_get_stack(ctx ctx, buf ptr[out, int8], size len[buf], )

# long bpf_get_stackid(void *ctx, struct bpf_map *map, u64 flags)
# FIXME: same flags problem (this time there are 2048 possible values)
# TODO maybe need to restrict map to BPF_MAP_TYPE_STACK_TRACE?
# bpf_get_stackid(ctx ctx, map fd_bpf_map, )

# long bpf_get_task_stack(struct task_struct *task, void *buf, u32 size, u64 flags)
# FIXME: same flags problem
# bpf_get_stackid(task task_struct_btf, buf ptr[out, int8], size len[buf], )

# u64 bpf_jiffies64(void)
bpf_jiffies64()

# void *bpf_kptr_xchg(void *map_value, void *ptr)
# FIXME: The first argument is ARG_PTR_TO_KPTR, but there is no helper producing
# it
# The comments says the BTF in the helper is determined dynamically by the verifier.
# Needs a closer look
# bpf_kptr_xchg

# u64 bpf_ktime_get_boot_ns(void)
bpf_ktime_get_boot_ns()

# u64 bpf_ktime_get_ns(void)
bpf_ktime_get_ns()

# long bpf_loop(u32 nr_loops, void *callback_fn, void *callback_ctx, u64 flags)
# FIXME Callback functions

# long bpf_map_delete_elem(struct bpf_map *map, const void *key)
# NOTE: Needs to fill-in the key somehow (probably in other insts)
bpf_map_delete_elem(map fd_bpf_map, key ptr_to_key)

# void *bpf_map_lookup_elem(struct bpf_map *map, const void *key)
# NOTE: Needs to fill-in the key somehow (probably in other insts)
bpf_map_lookup_elem(map fd_bpf_map, key ptr_to_key) ptr_to_val

# void *bpf_map_lookup_percpu_elem(struct bpf_map *map, const void *key, u32 cpu)
# NOTE: Needs to fill-in the key somehow (probably in other insts)
bpf_map_lookup_percpu_elem(map fd_bpf_map, key ptr_to_key, cpu int32[0:4294967295]) ptr_to_val

# long bpf_map_peek_elem(struct bpf_map *map, void *value)
# NOTE: Though uninit ptr_to_val is also allowed, it always gets overwritten
# Therefore it **probably** doesn't matter if we need to do an extra loopup to
# get a ptr_to_val
bpf_map_peek_elem(map fd_bpf_map, value ptr_to_val)

# long bpf_map_pop_elem(struct bpf_map *map, void *value)
bpf_map_pop_elem(map fd_bpf_map, value ptr_to_val)

# long bpf_map_push_elem(struct bpf_map *map, const void *value, u64 flags)
# NOTE: Needs to fill-in the value somehow (probably in other insts)
bpf_map_push_elem_flags = BPF_EXIST
bpf_map_push_elem(map fd_bpf_map, value ptr_to_val, flags flags[bpf_map_push_elem_flags, int64])

# long bpf_map_update_elem(struct bpf_map *map, const void *key, const void *value, u64 flags)
# NOTE: Needs to fill-in the key somehow (probably in other insts)
# NOTE: Needs to fill-in the value somehow (probably in other insts)
bpf_map_update_elem_flags = BPF_NOEXIST, BPF_EXIST, BPF_ANY
bpf_map_update_elem(map fd_bpf_map, key ptr_to_key, value ptr_to_val, flags flags[bpf_map_update_elem_flags, int64])

# void *bpf_per_cpu_ptr(const void *percpu_ptr, u32 cpu)
# TODO: This is a ARG_PTR_TO_PERCPU_BTF_ID, needs to check how verifier 
# deals with it

# long bpf_perf_event_output(void *ctx, struct bpf_map *map, u64 flags, void *data, u64 size)
# flags is not really a flag, it is an index
bpf_perf_event_output(ctx ctx, map fd_bpf_map, flags int64[0:18446744073709551615], data ptr[in, int8], size len[data]);

# u64 bpf_perf_event_read(struct bpf_map *map, u64 flags)
# again, the flag is an index
bpf_perf_event_read(map fd_bpf_map, flags int64[0:18446744073709551615])

bpf_perf_event_value {
	counter int64[0:18446744073709551615]
	enabled int64[0:18446744073709551615]
	running int64[0:18446744073709551615]
};
# long bpf_perf_event_read_value(struct bpf_map *map, u64 flags, struct bpf_perf_event_value *buf, u32 buf_size)
bpf_perf_event_read_value(map fd_bpf_map, flags int64[0:18446744073709551615], buf ptr[out, bpf_perf_event_value], buf_size const[24, int32])

# long bpf_probe_read(void *dst, u32 size, const void *unsafe_ptr)
bpf_probe_read(dst ptr[out, int8], size len[dst], unsafe_ptr int64)

# long bpf_probe_read_kernel(void *dst, u32 size, const void *unsafe_ptr)
bpf_probe_read_kernel(dst ptr[out, int8], size len[dst], unsafe_ptr int64)

# bpf_probe_read_kernel_str(void *dst, u32 size, const void *unsafe_ptr)
bpf_probe_read_kernel_str(dst ptr[out, int8], size len[dst], unsafe_ptr int64)

# long bpf_probe_read_str(void *dst, u32 size, const void *unsafe_ptr)
bpf_probe_read_str(dst ptr[out, int8], size len[dst], unsafe_ptr int64)

# long bpf_probe_read_user(void *dst, u32 size, const void *unsafe_ptr)
# TODO: how to give it an userspace address?
bpf_probe_read_user(dst ptr[out, int8], size len[dst], unsafe_ptr int64)

# long bpf_probe_read_user_str(void *dst, u32 size, const void *unsafe_ptr)
# TODO: how to give it an userspace address?
bpf_probe_read_user_str(dst ptr[out, int8], size len[dst], unsafe_ptr int64)

# long bpf_probe_write_user(void *dst, const void *src, u32 len)
# "Keep in mind that this feature is meant for experiments, and it
# has a risk of crashing the system and running programs."
# NOTE: Shall we fuzz it?
bpf_probe_write_user(dst u64, src ptr[out, int8], len len[dst])

